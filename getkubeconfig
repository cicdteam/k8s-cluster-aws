#!/bin/bash

[ -f $(dirname $0)/settings ]       && source $(dirname $0)/settings
[ -f $(dirname $0)/settings.local ] && source $(dirname $0)/settings.local
terraform_bin='.tfbin'

die () {
    echo; echo -e "ERROR: $1"; echo; cd $curdir; exit 1
}

check_params () {
    param_list=(name private_key_path)
    local errors=0
    for i in "${param_list[@]}"; do
        if [ -z "${!i}" ]; then echo "Please set parametr \"$i\" in 'settings' file"; errors=1; fi
    done
    if [ $errors -ne 0 ]; then die "Check your 'settings' file"; fi
}

check_utils () {
    [ "$(uname)" != "Linux" ] && die "Sorry, you must use Linux to run this srcipt"
    [ -z "$(which kubectl)" ] && die "kubectl not found! Please install it as described at https://kubernetes.io/docs/tasks/tools/install-kubectl/"
    [ ! -f "$(dirname $0)"/"$terraform_bin"/terraform ] && die "Terrafrom not found"
}


check_params
check_utils

echo 'Getting master node public IP address'
masterip=$(cd k8s-master && ../.tfbin/terraform output k8s-master-eip 2>/dev/null)
[ -z "$masterip" ] && die "Master node IP address not found"

remoteuser='k8s-aws'
sshrun="ssh -i $private_key_path ubuntu@$masterip"

# create service account
$sshrun kubectl -n kube-system get sa $remoteuser >/dev/null 2>&1 || $sshrun kubectl -n kube-system create sa $remoteuser

# set cluster-admin role for created serviceaccount
role="$($sshrun kubectl -n kube-system get clusterrolebinding $remoteuser -o jsonpath='{.roleRef.name}' 2>/dev/null)"
if [ "$role" != "cluster-admin" ]; then
    $sshrun kubectl -n kube-system delete clusterrolebinding $remoteuser 2>/dev/null
    $sshrun kubectl -n kube-system create clusterrolebinding $remoteuser --clusterrole=cluster-admin --serviceaccount=kube-system:$remoteuser
fi

secret="$($sshrun kubectl -n kube-system get sa $remoteuser -o jsonpath='{.secrets[].name}')"
cafile=$(mktemp)
cacert="$($sshrun kubectl -n kube-system get secret $secret -o jsonpath='{.data.ca\\.crt}' | base64 -d)"
token="$($sshrun kubectl -n kube-system get secret $secret -o jsonpath='{.data.token}' | base64 -d)"
endpoint="$($sshrun kubectl config view -o jsonpath='{.clusters[0].cluster.server}')"
echo "$cacert" >$cafile

# create kubeconfig entry
kubectl config set-cluster $name \
    --server=$endpoint \
    --certificate-authority=$cafile \
    --embed-certs=true
rm $cafile

# create user entry
kubectl config set-credentials $remoteuser --token=$token \

# create and use context entry
kubectl config set-context $name \
    --cluster=$name \
    --user=$remoteuser

kubectl config use-context $name
