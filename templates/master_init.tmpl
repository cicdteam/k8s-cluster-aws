#!/bin/bash

echo 'WAIT WHILE CLUSTER STORAGE EBS VOLUME ATTACHED'
instanceId=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
region=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | jq -r .region)
ebsState="unknown"
while [ "$ebsState" != "attached" ]; do
    sleep 5
    ebsState=$(aws ec2 describe-volumes \
        --region $region \
        --filters \
            Name=attachment.instance-id,Values=$instanceId \
            Name=attachment.device,Values=/dev/sdd \
        --query Volumes[].Attachments[].State \
        --output text)
done

# Format /dev/xvdd if it does not contain a partition yet
if [ "$(sudo file -b -s /dev/xvdd)" == "data" ]; then
    echo 'FORMAT CLUSTER STORAGE VOLUME'
    sudo mkfs.ext4 /dev/xvdd
fi

echo 'MOUNT CLUSTER STORAGE VOLUME'
echo '/dev/xvdd /k8s-cluster ext4 defaults,nofail 0 0' | sudo tee -a /etc/fstab
sudo mkdir /k8s-cluster; sudo mount /k8s-cluster
echo '/k8s-cluster/etcd /var/lib/etcd none bind' | sudo tee -a /etc/fstab
echo '/k8s-cluster/kubernetes /etc/kubernetes none bind' | sudo tee -a /etc/fstab
sudo mkdir -p /k8s-cluster/etcd /var/lib/etcd; sudo mount /var/lib/etcd
sudo mkdir -p /k8s-cluster/kubernetes /etc/kubernetes; sudo mount /etc/kubernetes

echo 'SET HOSTNAME'
nodename=$(curl -s 169.254.169.254/latest/meta-data/local-hostname)
echo $nodename | sudo tee /etc/hostname
sudo hostname $nodename

echo 'RUN DOCKER DAEMON'
sudo systemctl enable docker.service
sudo systemctl start docker.service

echo 'UPDATE KUBELET ARGS TO USE AWS CLOUD-PROVIDER AND SET LABELS'
[ ! -d /etc/systemd/system/kubelet.service.d ] && sudo mkdir -p /etc/systemd/system/kubelet.service.d
cat <<-'EOF' | sudo tee /etc/systemd/system/kubelet.service.d/20-cloud-provider.conf
	[Service]
	Environment="KUBELET_EXTRA_ARGS=--cloud-provider=aws --node-labels=kubernetes.io/role=master,node-role.kubernetes.io/master=''"
EOF
sudo systemctl daemon-reload
sudo systemctl enable kubelet.service
sudo systemctl start kubelet.service

# Initalize master if it was not initalized before
#
if [ ! -f /etc/kubernetes/kubelet.conf ]; then
    echo 'INITALIZE KUBERNETES MASTER'

    intIP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)
    extIP=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)

    cat <<-EOF | sudo tee /etc/kubernetes/kubeadm.conf
	kind: MasterConfiguration
	apiVersion: kubeadm.k8s.io/v1alpha1
	api:
	  advertiseAddress: $extIP
	  bindPort: 6443
	cloudProvider: aws
	token: ${token}
	networking:
	  podSubnet: 192.168.0.0/16
	apiServerCertSANs:
	  - $intIP
	  - $extIP
	  - $nodename
	  - kubernetes
	  - kubernetes.default
	  - kubernetes.default.svc
	  - kubernetes.default.svc.cluster.local
EOF

    sudo kubeadm init --skip-preflight-checks --config=/etc/kubernetes/kubeadm.conf

    echo 'INSTALL POD NETWORKING'

    # Pod networking manifests
    #
    calico_rbac_url='http://docs.projectcalico.org/v2.2/getting-started/kubernetes/installation/hosted/rbac.yaml'
    calico_url='http://docs.projectcalico.org/v2.2/getting-started/kubernetes/installation/hosted/kubernetes-datastore/calico-networking/1.6/calico.yaml'

    kubectl --kubeconfig=/etc/kubernetes/admin.conf apply -f $calico_rbac_url
    kubectl --kubeconfig=/etc/kubernetes/admin.conf apply -f $calico_url
fi

echo 'WAITING NODE COME ONLINE'
while ! kubectl --kubeconfig=/etc/kubernetes/admin.conf get nodes $nodename --no-headers; do sleep 5; done

echo 'ENSURE MASTER NODE HAS APROPRIATE LABEL'
while ! kubectl --kubeconfig=/etc/kubernetes/admin.conf get nodes --no-headers -l node-role.kubernetes.io/master | grep -o $nodename; do
    kubectl --kubeconfig=/etc/kubernetes/admin.conf label nodes $nodename node-role.kubernetes.io/master='' --overwrite
done
while ! kubectl --kubeconfig=/etc/kubernetes/admin.conf get nodes --no-headers -l kubernetes.io/role=master | grep -o $nodename; do
    kubectl --kubeconfig=/etc/kubernetes/admin.conf label nodes $nodename kubernetes.io/role=master --overwrite
done

echo 'ADDING DEFAULT STORAGE CLASS'
cat <<'EOF' | kubectl --kubeconfig=/etc/kubernetes/admin.conf apply -f -
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: default
  annotations:
    storageclass.kubernetes.io/is-default-class: "true"
provisioner: kubernetes.io/aws-ebs
EOF

echo 'COPYING KUBECTL CONFIG TO REGULAR USER'
sudo mkdir -p /home/ubuntu/.kube
sudo cp -f /etc/kubernetes/admin.conf /home/ubuntu/.kube/config
sudo chown -R ubuntu:ubuntu /home/ubuntu/.kube

echo 'DONE'

