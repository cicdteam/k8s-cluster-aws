#!/bin/bash

# set region and get InstanceID from AWS metadata
aws configure set region $(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | jq -r .region)
instanceId=$(curl -s http://instance-data/latest/meta-data/instance-id)

echo 'WAIT WHILE AWS TAGS INSTANCE BY KubernetesCluster TAG'
while [ -z "$(aws ec2 describe-tags --filters Name=resource-type,Values=instance Name=resource-id,Values=$instanceId Name=key,Values=KubernetesCluster | jq -r .Tags[].Value)" ]; do
    echo -n '.'
    sleep 1
done
echo

echo 'SET HOSTNAME'
echo $(curl 169.254.169.254/latest/meta-data/local-hostname) | sudo tee /etc/hostname
sudo hostname $(curl 169.254.169.254/latest/meta-data/local-hostname)

echo 'RUN DOCKER DAEMON'
sudo systemctl enable docker.service
sudo systemctl start docker.service

echo 'UPDATE KUBELET TO USE AWS CLOUD-PROVIDER AND SET NODE LABELS'
# preparing node labels
lifecycle=$(aws ec2 describe-instances --instance-ids $instanceId | jq -r '.Reservations[].Instances[].InstanceLifecycle')
if [ "$lifecycle" = "spot" ]; then NODEROLE="spotnode"; else NODEROLE="node"; fi

# labeling
[ ! -d /etc/systemd/system/kubelet.service.d ] && mkdir -p /etc/systemd/system/kubelet.service.d
if [ "$(lspci | grep -i nvidia)" ]; then
    NVIDIA_GPU_NAME=$(nvidia-smi --query-gpu=gpu_name --format=csv,noheader --id=0 | sed 's/[[:space:]]/-/g')
    cat <<-EOF | sudo tee /etc/systemd/system/kubelet.service.d/20-cloud-provider.conf
	[Service]
	Environment="KUBELET_EXTRA_ARGS=--feature-gates=Accelerators=true --cloud-provider=aws --node-labels=kubernetes.io/role=$NODEROLE,node-role.kubernetes.io/$NODEROLE='',alpha.kubernetes.io/nvidia-gpu-name=$NVIDIA_GPU_NAME"
EOF
else
    cat <<-EOF | sudo tee /etc/systemd/system/kubelet.service.d/20-cloud-provider.conf
	[Service]
	Environment="KUBELET_EXTRA_ARGS=--cloud-provider=aws --node-labels=kubernetes.io/role=$NODEROLE,node-role.kubernetes.io/$NODEROLE=''"
EOF
fi
sudo systemctl daemon-reload
sudo systemctl enable kubelet.service
sudo systemctl start kubelet.service

echo 'JOIN TO CLUSTER'
sudo kubeadm join --skip-preflight-checks --token=${token} ${master}:6443

echo 'DONE'
